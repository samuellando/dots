#!/bin/python3

import argparse
import subprocess
from pathlib import Path
import json
import os

CONFIG_DIRS = [
    str(Path.home()) + '/.tmixer-projects.json', 
    str(Path.home()) + '/.config/tmixer/projects.json'
]

PROJECTS_DIR = str(Path.home()) + '/Projects'

def kill(name): 
    # Killing the current session will exit, dont do that.
    current = get_current_session()
    if name == current:
        active = get_active_sessions()
        del active[active.index(name)]
        if len(active) > 0:
            switch_to(active[0])
        else:
            start("tmp", {"tmp": {"dir": "~"}})
    cmd = [
        'tmux', 
        'kill-session', 
        '-t', 
        clean_name(name)
    ]
    subprocess.run(cmd)

def switch_to(name):
    subprocess.run(['tmux', 'switch', '-t', name])
    
def start(name, projects):
    subprocess.run(['tmux', 'new', '-s', name, '-d'])
    subprocess.run(['tmux', 'switch', '-t', name])
    subprocess.run(['tmux', 'send-keys', '-t', f"{name}:1", f"cd {projects[name]["dir"]}", "enter"])
    subprocess.run(['tmux', 'send-keys', '-t', f"{name}:1", 'vim .', 'enter'])

def clean_name(name):
    return name.replace(" *", "").replace(" +", "")

def get_config_projects():
    global CONFIG_DIRS
    projects = {}
    for d in CONFIG_DIRS:
        try:
            with open(d, 'r') as f:
                projects.update(json.load(f))
        except:
            pass

    return projects

def get_projects():
    global PROJECTS_DIR
    projects = {}
    for d in os.listdir(PROJECTS_DIR):
        projects[d] = {"dir": f"{PROJECTS_DIR}/{d}"}
    return projects
        

def get_current_session():
    cmd = ['tmux', 'display-message', '-p', '#S']
    res = subprocess.run(cmd, stdout=subprocess.PIPE)
    return res.stdout.decode('utf-8').split('\n')[0]

def get_active_sessions():
    cmd = ['tmux', 'list-sessions', '-F', '#S']
    res = subprocess.run(cmd, stdout=subprocess.PIPE)
    return res.stdout.decode('utf-8').split('\n')[:-1]

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--kill')
    parser.add_argument('-i', '--interactive', action='store_true')
    args = parser.parse_args()

    if args.kill is not None:
        kill(clean_name(args.kill))
        exit()

    projects = get_config_projects()
    projects.update(get_projects())
    active_sessions = get_active_sessions()
    current_session = get_current_session()

    project_names = list(projects.keys())
    names = sorted(list(set(project_names + active_sessions)))

    for i, s in enumerate(names):
        if s in active_sessions:
            names[i] = s + " *"
        if s == current_session:
            names[i] = s + " +"

    if not args.interactive:
        for name in names:
            print(name)
        exit()

    fzf_command = [
        "fzf",
        "--multi",
        "--tiebreak=index",
        "--bind",
        "ctrl-x:execute(tmixer -k {})+reload(tmixer)"
    ]
    res = subprocess.run(fzf_command, input="\n".join(names).encode(), stdout=subprocess.PIPE)
    if res.returncode != 0:
        exit()
    name = clean_name(res.stdout.decode("utf-8").split("\n")[0])
    
    # Reload active sessions in case it was killed.
    active_sessions = get_active_sessions()

    if name in active_sessions:
        switch_to(name)
    else:
        start(name, projects)


if __name__ == "__main__":
    main()
